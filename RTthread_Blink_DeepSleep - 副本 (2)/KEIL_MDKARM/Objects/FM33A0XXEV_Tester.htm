<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\FM33A0XXEV_Tester.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\FM33A0XXEV_Tester.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Nov 18 15:30:12 2024
<BR><P>
<H3>Maximum Stack Usage =        504 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
GPRS_CmdProcessing_thread_entry &rArr; Disconnect &rArr; Send_AT_Command &rArr; UART4_Send
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[b]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b]">ADC_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[20]">BSTIM_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[1d]">BTx_IRQHandler</a> from bt16.o(i.BTx_IRQHandler) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[a]">CMU_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[1c]">COMP_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[18]">CRYPTO_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[1a]">DMA_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[1f]">ETx_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[2f]">EVC_HandShakeProcessing_thread_entry</a> from main.o(i.EVC_HandShakeProcessing_thread_entry) referenced from main.o(i.main)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[23]">GPIO_IRQHandler</a> from main.o(i.GPIO_IRQHandler) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[2e]">GPRS_CmdProcessing_thread_entry</a> from main.o(i.GPRS_CmdProcessing_thread_entry) referenced from main.o(i.main)
 <LI><a href="#[2]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[17]">I2Cx_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[19]">LPTIM_IRQHandler</a> from main.o(i.LPTIM_IRQHandler) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[16]">LPUART0_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[24]">LPUART1_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[1e]">QSPI_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from main.o(i.RTC_IRQHandler) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[30]">RTC_TimeOut_thread_entry</a> from main.o(i.RTC_TimeOut_thread_entry) referenced from main.o(i.main)
 <LI><a href="#[39]">Reset_Handler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[c]">SPI0_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[d]">SPI1_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[e]">SPI2_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[21]">SPI3_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[22]">SPI4_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[7]">SVD_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from board.o(i.SysTick_Handler) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[26]">SystemInit</a> from system_fm33a0xxev.o(i.SystemInit) referenced from startup_fm33a0xxev.o(.text)
 <LI><a href="#[2d]">TM_thread_entry</a> from main.o(i.TM_thread_entry) referenced from main.o(i.main)
 <LI><a href="#[15]">U7816_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[f]">UART0_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[10]">UART1_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[11]">UART2_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[12]">UART3_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[13]">UART4_IRQHandler</a> from uart.o(i.UART4_IRQHandler) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[14]">UART5_IRQHandler</a> from uart.o(i.UART5_IRQHandler) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[1b]">WKUPx_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[6]">WWDT_IRQHandler</a> from startup_fm33a0xxev.o(.text) referenced from startup_fm33a0xxev.o(RESET)
 <LI><a href="#[27]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_fm33a0xxev.o(.text)
 <LI><a href="#[25]">main</a> from components.o(i.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[31]">main_thread_entry</a> from components.o(i.main_thread_entry) referenced from components.o(i.rt_application_init)
 <LI><a href="#[32]">nothing</a> from board.o(i.nothing) referenced from board.o(i.rt_hw_board_init)
 <LI><a href="#[28]">rt_thread_exit</a> from thread.o(i.rt_thread_exit) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[34]">rt_thread_idle_entry</a> from idle.o(i.rt_thread_idle_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[29]">rt_thread_timeout</a> from thread.o(i.rt_thread_timeout) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[33]">rt_thread_timer_entry</a> from timer.o(i.rt_thread_timer_entry) referenced from timer.o(i.rt_system_timer_thread_init)
 <LI><a href="#[37]">rti_board_end</a> from components.o(i.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[36]">rti_board_start</a> from components.o(i.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[38]">rti_end</a> from components.o(i.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[35]">rti_start</a> from components.o(i.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[2a]">timeout_10ms</a> from main.o(i.timeout_10ms) referenced from main.o(i.main)
 <LI><a href="#[2b]">timeout_1s</a> from main.o(i.timeout_1s) referenced from main.o(i.main)
 <LI><a href="#[2c]">timeout_2s</a> from main.o(i.timeout_2s) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[27]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(.text)
</UL>
<P><STRONG><a name="[193]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[52]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[194]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[195]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[196]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3c]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[197]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[198]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[152]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_sethook
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[153]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_sethook
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[170]"></a>rt_hw_context_switch</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[171]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[17f]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[199]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>BSTIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>CMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>CRYPTO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ETx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2Cx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>LPUART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>U7816_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WKUPx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33a0xxev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[19a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_VoltageCalc
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_VoltageCalc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_TimeCalibration
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_SetInterval
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_Read_UserDate2
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_Read_RealTimeDate
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CmdProcessing_thread_entry
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CmdProcessing_thread_entry
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_Read_UserDate2
</UL>

<P><STRONG><a name="[19f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[96]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CmdProcessing_thread_entry
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_dadd</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1a0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1a1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1a2]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[4e]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[4a]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[49]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1a4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_hw_board_init &rArr; Init_System &rArr; Uartx_Init &rArr; UART_SInit &rArr; UART_BaudREGCalc &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[5e]"></a>ADC_CFGR_BUFEN_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33a0xxev_adc.o(i.ADC_CFGR_BUFEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init_ExVolt
</UL>

<P><STRONG><a name="[110]"></a>ADC_CFGR_BUFSEL_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33a0xxev_adc.o(i.ADC_CFGR_BUFSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ADC_ExVolt
</UL>

<P><STRONG><a name="[61]"></a>ADC_CR_ADC_IE_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33a0xxev_adc.o(i.ADC_CR_ADC_IE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init_ExVolt
</UL>

<P><STRONG><a name="[62]"></a>ADC_CR_EN_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33a0xxev_adc.o(i.ADC_CR_EN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ADC_ExVolt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init_ExVolt
</UL>

<P><STRONG><a name="[5f]"></a>ADC_CR_MODE_Set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xxev_adc.o(i.ADC_CR_MODE_Set))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init_ExVolt
</UL>

<P><STRONG><a name="[112]"></a>ADC_DR_Read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33a0xxev_adc.o(i.ADC_DR_Read))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ADC_ExVolt
</UL>

<P><STRONG><a name="[54]"></a>ADC_IO_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, adc.o(i.ADC_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ADC_IO_Init &rArr; AnalogIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_PERCLK_SetableEx
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogIO
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_ANEN_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ADC_ExVolt
</UL>

<P><STRONG><a name="[64]"></a>ADC_ISR_ADC_IF_Chk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33a0xxev_adc.o(i.ADC_ISR_ADC_IF_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Wait_Finish
</UL>

<P><STRONG><a name="[111]"></a>ADC_ISR_ADC_IF_Clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33a0xxev_adc.o(i.ADC_ISR_ADC_IF_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ADC_ExVolt
</UL>

<P><STRONG><a name="[58]"></a>ADC_Init_ExVolt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, adc.o(i.ADC_Init_ExVolt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init_ExVolt &rArr; VRTC_Init_RCMF_Trim
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDIF_CR_INTF_EN_Setable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VRTC_Init_RCMF_Trim
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VRTC_ADCCR_CKS_Set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VRTC_ADCCR_CKE_Setable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TRIM_Write
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CR_MODE_Set
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CR_EN_Setable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CR_ADC_IE_Setable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CFGR_BUFEN_Setable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VRTC_RCMFCR_EN_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ADC_ExVolt
</UL>

<P><STRONG><a name="[60]"></a>ADC_TRIM_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xxev_adc.o(i.ADC_TRIM_Write))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init_ExVolt
</UL>

<P><STRONG><a name="[63]"></a>ADC_Wait_Finish</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, adc.o(i.ADC_Wait_Finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Wait_Finish
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ISR_ADC_IF_Chk
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ADC_ExVolt
</UL>

<P><STRONG><a name="[65]"></a>ANAC_ADC_VoltageCalc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, adc.o(i.ANAC_ADC_VoltageCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ANAC_ADC_VoltageCalc &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ADC_ExVolt
</UL>

<P><STRONG><a name="[66]"></a>AltFunIO</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, user_init.o(i.AltFunIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AltFunIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_InitPara
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uartx_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[56]"></a>AnalogIO</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, user_init.o(i.AnalogIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AnalogIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_InitPara
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IO_Init
</UL>

<P><STRONG><a name="[71]"></a>BTx_CFGR1_GRP1SEL_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33a0xxev_bt.o(i.BTx_CFGR1_GRP1SEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerInit
</UL>

<P><STRONG><a name="[6c]"></a>BTx_CR1_CHEN_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33a0xxev_bt.o(i.BTx_CR1_CHEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerStop
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerStart
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>BTx_CR1_EDGESEL_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33a0xxev_bt.o(i.BTx_CR1_EDGESEL_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BTx_CR1_EDGESEL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerInit
</UL>

<P><STRONG><a name="[6e]"></a>BTx_CR1_MODE_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33a0xxev_bt.o(i.BTx_CR1_MODE_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BTx_CR1_MODE_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerInit
</UL>

<P><STRONG><a name="[75]"></a>BTx_CR2_CNTHSEL_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33a0xxev_bt.o(i.BTx_CR2_CNTHSEL_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BTx_CR2_CNTHSEL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerInit
</UL>

<P><STRONG><a name="[70]"></a>BTx_CR2_SIG2SEL_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33a0xxev_bt.o(i.BTx_CR2_SIG2SEL_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BTx_CR2_SIG2SEL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerInit
</UL>

<P><STRONG><a name="[76]"></a>BTx_CR2_STDIR_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33a0xxev_bt.o(i.BTx_CR2_STDIR_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerInit
</UL>

<P><STRONG><a name="[7a]"></a>BTx_IER_CMPHIE_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33a0xxev_bt.o(i.BTx_IER_CMPHIE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerInit
</UL>

<P><STRONG><a name="[7b]"></a>BTx_IER_OVHIE_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33a0xxev_bt.o(i.BTx_IER_OVHIE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerInit
</UL>

<P><STRONG><a name="[1d]"></a>BTx_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bt16.o(i.BTx_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BTx_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_ISR_CMPLIF_Clr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_ISR_CMPHIF_Clr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_ISR_CMPHIF_Chk
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_CR1_CHEN_Setable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>BTx_ISR_CMPHIF_Chk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33a0xxev_bt.o(i.BTx_ISR_CMPHIF_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>BTx_ISR_CMPHIF_Clr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33a0xxev_bt.o(i.BTx_ISR_CMPHIF_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerInit
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>BTx_ISR_CMPLIF_Clr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33a0xxev_bt.o(i.BTx_ISR_CMPLIF_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>BTx_LOADCR_LHEN_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33a0xxev_bt.o(i.BTx_LOADCR_LHEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerInit
</UL>

<P><STRONG><a name="[77]"></a>BTx_LOADCR_LLEN_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33a0xxev_bt.o(i.BTx_LOADCR_LLEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerInit
</UL>

<P><STRONG><a name="[74]"></a>BTx_LOADH_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33a0xxev_bt.o(i.BTx_LOADH_Write))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerInit
</UL>

<P><STRONG><a name="[73]"></a>BTx_LOADL_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33a0xxev_bt.o(i.BTx_LOADL_Write))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerInit
</UL>

<P><STRONG><a name="[72]"></a>BTx_PRES_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33a0xxev_bt.o(i.BTx_PRES_Write))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerInit
</UL>

<P><STRONG><a name="[6d]"></a>BtimerInit</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, bt16.o(i.BtimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BtimerInit &rArr; CMU_PERCLK_SetableEx
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_PERCLK_SetableEx
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_PRES_Write
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_LOADL_Write
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_LOADH_Write
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_LOADCR_LLEN_Setable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_LOADCR_LHEN_Setable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_ISR_CMPHIF_Clr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_IER_OVHIE_Setable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_IER_CMPHIE_Setable
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_CR2_STDIR_Setable
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_CR2_SIG2SEL_Set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_CR2_CNTHSEL_Set
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_CR1_MODE_Set
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_CR1_EDGESEL_Set
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_CFGR1_GRP1SEL_Set
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[7c]"></a>BtimerStart</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bt16.o(i.BtimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BtimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_CR1_CHEN_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CmdProcessing_thread_entry
</UL>

<P><STRONG><a name="[7d]"></a>BtimerStop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bt16.o(i.BtimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BtimerStop
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTx_CR1_CHEN_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CmdProcessing_thread_entry
</UL>

<P><STRONG><a name="[59]"></a>CDIF_CR_INTF_EN_Setable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33a0xxev_cdif.o(i.CDIF_CR_INTF_EN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeepSleep
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init_ExVolt
</UL>

<P><STRONG><a name="[7e]"></a>CMU_GetClocksFreq</STRONG> (Thumb, 274 bytes, Stack size 4 bytes, fm33a0xxev_cmu.o(i.CMU_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CMU_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_SYSCLKCR_SYSCLKSEL_Get
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_SYSCLKCR_APBPRES_Get
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_SYSCLKCR_AHBPRES_Get
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_RCHFCR_RCHFEN_Getable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_RCHFCR_FSEL_Get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_PLLHCR_PLLHDB_Get
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_PLLHCR_OSEL_Get
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_PLLHCR_EN_Getable
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uartx_Init
</UL>

<P><STRONG><a name="[87]"></a>CMU_Init_RCHF_Trim</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fm33a0xxev_cmu.o(i.CMU_Init_RCHF_Trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMU_Init_RCHF_Trim
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_RCHFTR_RCHFTRIM_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RCHF
</UL>

<P><STRONG><a name="[ae]"></a>CMU_OPCCR1_EXTICKE_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_OPCCR1_EXTICKE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>

<P><STRONG><a name="[ad]"></a>CMU_OPCCR1_EXTICKSEL_Set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_OPCCR1_EXTICKSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>

<P><STRONG><a name="[12e]"></a>CMU_OPCCR1_UART0CKE_Setable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_OPCCR1_UART0CKE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SInit
</UL>

<P><STRONG><a name="[12d]"></a>CMU_OPCCR1_UART0CKS_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_OPCCR1_UART0CKS_Set))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SInit
</UL>

<P><STRONG><a name="[130]"></a>CMU_OPCCR1_UART1CKE_Setable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_OPCCR1_UART1CKE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SInit
</UL>

<P><STRONG><a name="[12f]"></a>CMU_OPCCR1_UART1CKS_Set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_OPCCR1_UART1CKS_Set))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SInit
</UL>

<P><STRONG><a name="[13e]"></a>CMU_OPCCR2_LPTCKE_Setable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_OPCCR2_LPTCKE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm33xx_hw_lptimer_init
</UL>

<P><STRONG><a name="[13d]"></a>CMU_OPCCR2_LPTCKS_Set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_OPCCR2_LPTCKS_Set))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm33xx_hw_lptimer_init
</UL>

<P><STRONG><a name="[55]"></a>CMU_PERCLK_SetableEx</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, fm33a0xxev_cmu.o(i.CMU_PERCLK_SetableEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CMU_PERCLK_SetableEx
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm33xx_hw_lptimer_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IO_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SInit
</UL>

<P><STRONG><a name="[81]"></a>CMU_PLLHCR_EN_Getable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_PLLHCR_EN_Getable))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_GetClocksFreq
</UL>

<P><STRONG><a name="[83]"></a>CMU_PLLHCR_OSEL_Get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_PLLHCR_OSEL_Get))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_GetClocksFreq
</UL>

<P><STRONG><a name="[82]"></a>CMU_PLLHCR_PLLHDB_Get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_PLLHCR_PLLHDB_Get))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_GetClocksFreq
</UL>

<P><STRONG><a name="[80]"></a>CMU_RCHFCR_FSEL_Get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_RCHFCR_FSEL_Get))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_GetClocksFreq
</UL>

<P><STRONG><a name="[8a]"></a>CMU_RCHFCR_FSEL_Set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_RCHFCR_FSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_RCHF_Init
</UL>

<P><STRONG><a name="[7f]"></a>CMU_RCHFCR_RCHFEN_Getable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_RCHFCR_RCHFEN_Getable))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_GetClocksFreq
</UL>

<P><STRONG><a name="[8b]"></a>CMU_RCHFCR_RCHFEN_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_RCHFCR_RCHFEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_RCHF_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SInit
</UL>

<P><STRONG><a name="[88]"></a>CMU_RCHFTR_RCHFTRIM_Set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_RCHFTR_RCHFTRIM_Set))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_Init_RCHF_Trim
</UL>

<P><STRONG><a name="[89]"></a>CMU_RCHF_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fm33a0xxev_cmu.o(i.CMU_RCHF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMU_RCHF_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_RCHFCR_RCHFEN_Setable
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_RCHFCR_FSEL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RCHF
</UL>

<P><STRONG><a name="[85]"></a>CMU_SYSCLKCR_AHBPRES_Get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_SYSCLKCR_AHBPRES_Get))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_GetClocksFreq
</UL>

<P><STRONG><a name="[8e]"></a>CMU_SYSCLKCR_AHBPRES_Set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_SYSCLKCR_AHBPRES_Set))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_SysClk_Init
</UL>

<P><STRONG><a name="[86]"></a>CMU_SYSCLKCR_APBPRES_Get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_SYSCLKCR_APBPRES_Get))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_GetClocksFreq
</UL>

<P><STRONG><a name="[8f]"></a>CMU_SYSCLKCR_APBPRES_Set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_SYSCLKCR_APBPRES_Set))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_SysClk_Init
</UL>

<P><STRONG><a name="[90]"></a>CMU_SYSCLKCR_SLP_ENEXTI_Setable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_SYSCLKCR_SLP_ENEXTI_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_SysClk_Init
</UL>

<P><STRONG><a name="[84]"></a>CMU_SYSCLKCR_SYSCLKSEL_Get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_SYSCLKCR_SYSCLKSEL_Get))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_GetClocksFreq
</UL>

<P><STRONG><a name="[8d]"></a>CMU_SYSCLKCR_SYSCLKSEL_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33a0xxev_cmu.o(i.CMU_SYSCLKCR_SYSCLKSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_SysClk_Init
</UL>

<P><STRONG><a name="[8c]"></a>CMU_SysClk_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fm33a0xxev_cmu.o(i.CMU_SysClk_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMU_SysClk_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_SYSCLKCR_SYSCLKSEL_Set
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_SYSCLKCR_SLP_ENEXTI_Setable
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_SYSCLKCR_APBPRES_Set
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_SYSCLKCR_AHBPRES_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk
</UL>

<P><STRONG><a name="[91]"></a>Connect</STRONG> (Thumb, 1290 bytes, Stack size 8 bytes, ec800.o(i.Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Connect &rArr; Send_AT_Command &rArr; UART4_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerStop
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerStart
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_ISR_RXBF_Clr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_IER_RXBF_IE_Setable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_thread_entry
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeOut_thread_entry
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_HandShakeProcessing_thread_entry
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[df]"></a>DEBUG_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, user_init.o(i.DEBUG_Init))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[9b]"></a>DeepSleep</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, sleep.o(i.DeepSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DeepSleep &rArr; PMU_SleepCfg_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMU_PDRCR_PDREN_Setable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMU_BORCR_OFF_BOR_Setable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDIF_CR_INTF_EN_Setable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Clr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VRTC_RCMFCR_EN_Setable
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMU_PDRCR_PDRCFG_Set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_SleepCfg_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
</UL>

<P><STRONG><a name="[a1]"></a>Disconnect</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, ec800.o(i.Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Disconnect &rArr; Send_AT_Command &rArr; UART4_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeepSleep
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerStop
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerStart
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CmdProcessing_thread_entry
</UL>

<P><STRONG><a name="[a4]"></a>EVC_Read_RealTimeDate</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, main.o(i.EVC_Read_RealTimeDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EVC_Read_RealTimeDate &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Send
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_crc16
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CmdProcessing_thread_entry
</UL>

<P><STRONG><a name="[a3]"></a>EVC_Read_UserDate2</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, main.o(i.EVC_Read_UserDate2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EVC_Read_UserDate2 &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Send
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_crc16
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Latest_Alarm
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeOut_thread_entry
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_HandShakeProcessing_thread_entry
</UL>

<P><STRONG><a name="[a9]"></a>EVC_SetInterval</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, main.o(i.EVC_SetInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EVC_SetInterval &rArr; modbus_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Send
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_crc16
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CmdProcessing_thread_entry
</UL>

<P><STRONG><a name="[aa]"></a>EVC_TimeCalibration</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, main.o(i.EVC_TimeCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = EVC_TimeCalibration &rArr; RTC_GetRTC &rArr; RTC_TimeDate_GetEx
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Send
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_crc16
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CmdProcessing_thread_entry
</UL>

<P><STRONG><a name="[ac]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, user_init.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EXTI_Init &rArr; GPIO_EXTI_Init &rArr; GPIO_EXTI_Select_Edge
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_PERCLK_SetableEx
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OPCCR1_EXTICKSEL_Set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OPCCR1_EXTICKE_Setable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputtIO
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[d9]"></a>FLS_RDCR_WAIT_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33a0xxev_flash.o(i.FLS_RDCR_WAIT_Set))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[b2]"></a>Flash_Spi1_Init</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, spi.o(i.Flash_Spi1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Flash_Spi1_Init &rArr; AltFunIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_PERCLK_SetableEx
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_CR3_TXBFC_Clr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_CR3_SERRC_Clr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_CR3_RXBFC_Clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_CR3_MERRC_Clr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_CR2_TXO_Setable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_CR2_TXO_AC_Setable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_CR2_SSN_Set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_CR2_SSNSEN_Setable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_CR2_SSNM_Set
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_CR2_SPIEN_Setable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_CR2_RXO_Setable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_CR2_HALFDUPLEX_Set
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_CR2_DLEN_Set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_CR1_WAIT_Set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_CR1_MM_Set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_CR1_LSBF_Set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_CR1_IOSWAP_Set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_CR1_CPHOL_Set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_CR1_CPHA_Set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_CR1_BAUD_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[c9]"></a>GPIO_EXTI_EXTIDF_Setable</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, fm33a0xxev_gpio.o(i.GPIO_EXTI_EXTIDF_Setable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_EXTI_EXTIDF_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_Init
</UL>

<P><STRONG><a name="[cc]"></a>GPIO_EXTI_EXTIISR_ChkEx</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, fm33a0xxev_gpio.o(i.GPIO_EXTI_EXTIISR_ChkEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_EXTI_EXTIISR_ChkEx
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>GPIO_EXTI_EXTIISR_ClrEx</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, fm33a0xxev_gpio.o(i.GPIO_EXTI_EXTIISR_ClrEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_EXTI_EXTIISR_ClrEx
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_Init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[b0]"></a>GPIO_EXTI_Init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, fm33a0xxev_gpio.o(i.GPIO_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO_EXTI_Init &rArr; GPIO_EXTI_Select_Edge
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayUs
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_EXTIISR_ClrEx
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_Select_Pin
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_Select_Edge
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_EXTIDF_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>

<P><STRONG><a name="[c7]"></a>GPIO_EXTI_Select_Edge</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, fm33a0xxev_gpio.o(i.GPIO_EXTI_Select_Edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_EXTI_Select_Edge
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_Init
</UL>

<P><STRONG><a name="[c8]"></a>GPIO_EXTI_Select_Pin</STRONG> (Thumb, 296 bytes, Stack size 20 bytes, fm33a0xxev_gpio.o(i.GPIO_EXTI_Select_Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_EXTI_Select_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_Init
</UL>

<P><STRONG><a name="[67]"></a>GPIO_Get_InitPara</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, fm33a0xxev_gpio.o(i.GPIO_Get_InitPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Get_InitPara
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputtIO
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogIO
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
</UL>

<P><STRONG><a name="[23]"></a>GPIO_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, main.o(i.GPIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIO_IRQHandler &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_EXTIISR_ClrEx
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_EXTIISR_ChkEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIO_Init</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, fm33a0xxev_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_IO_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputtIO
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogIO
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
</UL>

<P><STRONG><a name="[cd]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33a0xxev_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_10ms
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[92]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fm33a0xxev_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_IO_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Read
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_thread_entry
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart
</UL>

<P><STRONG><a name="[9a]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fm33a0xxev_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Read
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_thread_entry
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart
</UL>

<P><STRONG><a name="[57]"></a>GPIOx_ANEN_Setable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33a0xxev_gpio.o(i.GPIOx_ANEN_Setable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOx_ANEN_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IO_Init
</UL>

<P><STRONG><a name="[131]"></a>GPIOx_DFS_Setable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33a0xxev_gpio.o(i.GPIOx_DFS_Setable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOx_DFS_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uartx_Init
</UL>

<P><STRONG><a name="[cf]"></a>GPRS_CRC</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, main.o(i.GPRS_CRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPRS_CRC &rArr; modbus_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CmdProcessing_thread_entry
</UL>

<P><STRONG><a name="[d4]"></a>IO_Init</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, user_init.o(i.IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[a0]"></a>IWDT_Clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, user_init.o(i.IWDT_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeepSleep
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
</UL>

<P><STRONG><a name="[d5]"></a>IWDT_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, user_init.o(i.IWDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IWDT_Init &rArr; CMU_PERCLK_SetableEx
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_PERCLK_SetableEx
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Clr
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[d6]"></a>Init_RCHF</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, user_init.o(i.Init_RCHF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init_RCHF &rArr; CMU_RCHF_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_RCHF_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_Init_RCHF_Trim
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[da]"></a>Init_RCLP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, user_init.o(i.Init_RCLP))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[d7]"></a>Init_SysClk</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, user_init.o(i.Init_SysClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_SysClk &rArr; CMU_SysClk_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_SysClk_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[d8]"></a>Init_SysClk_Gen</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, user_init.o(i.Init_SysClk_Gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Init_SysClk_Gen &rArr; Init_SysClk &rArr; CMU_SysClk_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLS_RDCR_WAIT_Set
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RCLP
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RCHF
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[db]"></a>Init_SysTick</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, user_init.o(i.Init_SysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Init_SysTick &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[dc]"></a>Init_System</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, user_init.o(i.Init_System))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Init_System &rArr; Uartx_Init &rArr; UART_SInit &rArr; UART_BaudREGCalc &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uartx_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uartx_Enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMU_PDRCR_PDREN_Setable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMU_BORCR_OFF_BOR_Setable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMU_BORCR_BOR_PDRCFG_Set
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayMs
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPower_IO_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysTick
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Clr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[af]"></a>InputtIO</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, user_init.o(i.InputtIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = InputtIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_InitPara
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>

<P><STRONG><a name="[144]"></a>LPTIM_ARR_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33a0xxev_lptim.o(i.LPTIM_ARR_Write))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm33xx_hw_lptimer_init
</UL>

<P><STRONG><a name="[141]"></a>LPTIM_CFGR_DIVSEL_Set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fm33a0xxev_lptim.o(i.LPTIM_CFGR_DIVSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm33xx_hw_lptimer_init
</UL>

<P><STRONG><a name="[13f]"></a>LPTIM_CFGR_ETR_AFEN_Setable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fm33a0xxev_lptim.o(i.LPTIM_CFGR_ETR_AFEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm33xx_hw_lptimer_init
</UL>

<P><STRONG><a name="[142]"></a>LPTIM_CFGR_ONST_Set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xxev_lptim.o(i.LPTIM_CFGR_ONST_Set))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm33xx_hw_lptimer_init
</UL>

<P><STRONG><a name="[140]"></a>LPTIM_CFGR_PSCSEL_Set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fm33a0xxev_lptim.o(i.LPTIM_CFGR_PSCSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm33xx_hw_lptimer_init
</UL>

<P><STRONG><a name="[143]"></a>LPTIM_CFGR_TMODE_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33a0xxev_lptim.o(i.LPTIM_CFGR_TMODE_Set))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm33xx_hw_lptimer_init
</UL>

<P><STRONG><a name="[147]"></a>LPTIM_CR_EN_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33a0xxev_lptim.o(i.LPTIM_CR_EN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm33xx_hw_lptimer_init
</UL>

<P><STRONG><a name="[145]"></a>LPTIM_IER_OVIE_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33a0xxev_lptim.o(i.LPTIM_IER_OVIE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm33xx_hw_lptimer_init
</UL>

<P><STRONG><a name="[19]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.LPTIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LPTIM_IRQHandler &rArr; Voltage_Read &rArr; Test_ADC_ExVolt &rArr; ADC_IO_Init &rArr; AnalogIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_ISR_OVIF_Clr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_ISR_OVIF_Chk
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>LPTIM_ISR_OVIF_Chk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33a0xxev_lptim.o(i.LPTIM_ISR_OVIF_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>LPTIM_ISR_OVIF_Clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33a0xxev_lptim.o(i.LPTIM_ISR_OVIF_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm33xx_hw_lptimer_init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>LowPower_IO_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, user_init.o(i.LowPower_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LowPower_IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[e8]"></a>PMU_CR_CVS_Set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xxev_pmu.o(i.PMU_CR_CVS_Set))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_SleepCfg_Init
</UL>

<P><STRONG><a name="[ea]"></a>PMU_CR_PMOD_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33a0xxev_pmu.o(i.PMU_CR_PMOD_Set))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_SleepCfg_Init
</UL>

<P><STRONG><a name="[e7]"></a>PMU_CR_SLPDP_Set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xxev_pmu.o(i.PMU_CR_SLPDP_Set))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_SleepCfg_Init
</UL>

<P><STRONG><a name="[9f]"></a>PMU_SleepCfg_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fm33a0xxev_pmu.o(i.PMU_SleepCfg_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PMU_SleepCfg_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_WKTR_T1A_Set
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_CR_SLPDP_Set
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_CR_PMOD_Set
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_CR_CVS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeepSleep
</UL>

<P><STRONG><a name="[e9]"></a>PMU_WKTR_T1A_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33a0xxev_pmu.o(i.PMU_WKTR_T1A_Set))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_SleepCfg_Init
</UL>

<P><STRONG><a name="[de]"></a>RMU_BORCR_BOR_PDRCFG_Set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xxev_rmu.o(i.RMU_BORCR_BOR_PDRCFG_Set))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[9e]"></a>RMU_BORCR_OFF_BOR_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33a0xxev_rmu.o(i.RMU_BORCR_OFF_BOR_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeepSleep
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[9d]"></a>RMU_PDRCR_PDRCFG_Set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xxev_rmu.o(i.RMU_PDRCR_PDRCFG_Set))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeepSleep
</UL>

<P><STRONG><a name="[9c]"></a>RMU_PDRCR_PDREN_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33a0xxev_rmu.o(i.RMU_PDRCR_PDREN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeepSleep
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[f2]"></a>RTC_ALARM_ALARMHOUR_Set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_ALARM_ALARMHOUR_Set))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmTime_SetEx
</UL>

<P><STRONG><a name="[f1]"></a>RTC_ALARM_ALARMMIN_Set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_ALARM_ALARMMIN_Set))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmTime_SetEx
</UL>

<P><STRONG><a name="[f0]"></a>RTC_ALARM_ALARMSEC_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_ALARM_ALARMSEC_Set))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmTime_SetEx
</UL>

<P><STRONG><a name="[eb]"></a>RTC_ALARM_ALMEN_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_ALARM_ALMEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm
</UL>

<P><STRONG><a name="[d3]"></a>RTC_Alarm</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtc.o(i.RTC_Alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Alarm &rArr; RTC_AlarmTime_SetEx
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ISR_ALARM_IF_Clr
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IER_ALARM_IE_Setable
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CR_RTC_EN_Setable
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmTime_SetEx
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ALARM_ALMEN_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Latest_Alarm
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CmdProcessing_thread_entry
</UL>

<P><STRONG><a name="[ed]"></a>RTC_AlarmTime_SetEx</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33a0xxev_rtc.o(i.RTC_AlarmTime_SetEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_AlarmTime_SetEx
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ALARM_ALARMSEC_Set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ALARM_ALARMMIN_Set
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ALARM_ALARMHOUR_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm
</UL>

<P><STRONG><a name="[ff]"></a>RTC_BCDDATE_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_BCDDATE_Read))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_GetEx
</UL>

<P><STRONG><a name="[106]"></a>RTC_BCDDATE_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_BCDDATE_Write))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_SetEx
</UL>

<P><STRONG><a name="[fe]"></a>RTC_BCDHOUR_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_BCDHOUR_Read))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_GetEx
</UL>

<P><STRONG><a name="[105]"></a>RTC_BCDHOUR_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_BCDHOUR_Write))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_SetEx
</UL>

<P><STRONG><a name="[fd]"></a>RTC_BCDMIN_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_BCDMIN_Read))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_GetEx
</UL>

<P><STRONG><a name="[104]"></a>RTC_BCDMIN_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_BCDMIN_Write))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_SetEx
</UL>

<P><STRONG><a name="[100]"></a>RTC_BCDMONTH_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_BCDMONTH_Read))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_GetEx
</UL>

<P><STRONG><a name="[107]"></a>RTC_BCDMONTH_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_BCDMONTH_Write))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_SetEx
</UL>

<P><STRONG><a name="[fc]"></a>RTC_BCDSEC_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_BCDSEC_Read))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_GetEx
</UL>

<P><STRONG><a name="[103]"></a>RTC_BCDSEC_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_BCDSEC_Write))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_SetEx
</UL>

<P><STRONG><a name="[102]"></a>RTC_BCDWEEK_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_BCDWEEK_Read))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_GetEx
</UL>

<P><STRONG><a name="[109]"></a>RTC_BCDWEEK_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_BCDWEEK_Write))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_SetEx
</UL>

<P><STRONG><a name="[101]"></a>RTC_BCDYEAR_Read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_BCDYEAR_Read))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_GetEx
</UL>

<P><STRONG><a name="[108]"></a>RTC_BCDYEAR_Write</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_BCDYEAR_Write))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_SetEx
</UL>

<P><STRONG><a name="[ef]"></a>RTC_CR_RTC_EN_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_CR_RTC_EN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm
</UL>

<P><STRONG><a name="[ab]"></a>RTC_GetRTC</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, rtc.o(i.RTC_GetRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_GetRTC &rArr; RTC_TimeDate_GetEx
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_GetEx
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Latest_Alarm
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_TimeCalibration
</UL>

<P><STRONG><a name="[ec]"></a>RTC_IER_ALARM_IE_Setable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_IER_ALARM_IE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm
</UL>

<P><STRONG><a name="[f8]"></a>RTC_IER_SEC_IE_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_IER_SEC_IE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RTC_IRQHandler &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ISR_SEC_IF_Clr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ISR_SEC_IF_Chk
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ISR_ALARM_IF_Clr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ISR_ALARM_IF_Chk
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>RTC_ISR_ALARM_IF_Chk</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_ISR_ALARM_IF_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>RTC_ISR_ALARM_IF_Clr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_ISR_ALARM_IF_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>RTC_ISR_SEC_IF_Chk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_ISR_SEC_IF_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>RTC_ISR_SEC_IF_Clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_ISR_SEC_IF_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>RTC_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Init &rArr; CMU_PERCLK_SetableEx
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_PERCLK_SetableEx
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ISR_SEC_IF_Clr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_VCAL_PR1SEN_Setable
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IER_SEC_IE_Setable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[d2]"></a>RTC_SetRTC</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, rtc.o(i.RTC_SetRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RTC_SetRTC &rArr; RTC_GetRTC &rArr; RTC_TimeDate_GetEx
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WER_Write
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_SetEx
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CmdProcessing_thread_entry
</UL>

<P><STRONG><a name="[f3]"></a>RTC_TimeDate_GetEx</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, fm33a0xxev_rtc.o(i.RTC_TimeDate_GetEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_TimeDate_GetEx
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDYEAR_Read
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDWEEK_Read
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDSEC_Read
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDMONTH_Read
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDMIN_Read
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDHOUR_Read
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDDATE_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC
</UL>

<P><STRONG><a name="[fb]"></a>RTC_TimeDate_SetEx</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, fm33a0xxev_rtc.o(i.RTC_TimeDate_SetEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_TimeDate_SetEx
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDYEAR_Write
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDWEEK_Write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDSEC_Write
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDMONTH_Write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDMIN_Write
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDHOUR_Write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDDATE_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
</UL>

<P><STRONG><a name="[f7]"></a>RTC_VCAL_PR1SEN_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_VCAL_PR1SEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[fa]"></a>RTC_WER_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33a0xxev_rtc.o(i.RTC_WER_Write))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
</UL>

<P><STRONG><a name="[98]"></a>Restart</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ec800.o(i.Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Restart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect
</UL>

<P><STRONG><a name="[b6]"></a>SPIx_CR1_BAUD_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33a0xxev_spi.o(i.SPIx_CR1_BAUD_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIx_CR1_BAUD_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[b9]"></a>SPIx_CR1_CPHA_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33a0xxev_spi.o(i.SPIx_CR1_CPHA_Set))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[b8]"></a>SPIx_CR1_CPHOL_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33a0xxev_spi.o(i.SPIx_CR1_CPHOL_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIx_CR1_CPHOL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[b3]"></a>SPIx_CR1_IOSWAP_Set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33a0xxev_spi.o(i.SPIx_CR1_IOSWAP_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIx_CR1_IOSWAP_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[b7]"></a>SPIx_CR1_LSBF_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33a0xxev_spi.o(i.SPIx_CR1_LSBF_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIx_CR1_LSBF_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[b4]"></a>SPIx_CR1_MM_Set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33a0xxev_spi.o(i.SPIx_CR1_MM_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIx_CR1_MM_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[b5]"></a>SPIx_CR1_WAIT_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33a0xxev_spi.o(i.SPIx_CR1_WAIT_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIx_CR1_WAIT_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[bc]"></a>SPIx_CR2_DLEN_Set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33a0xxev_spi.o(i.SPIx_CR2_DLEN_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIx_CR2_DLEN_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[bd]"></a>SPIx_CR2_HALFDUPLEX_Set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33a0xxev_spi.o(i.SPIx_CR2_HALFDUPLEX_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIx_CR2_HALFDUPLEX_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[bb]"></a>SPIx_CR2_RXO_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xxev_spi.o(i.SPIx_CR2_RXO_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[c6]"></a>SPIx_CR2_SPIEN_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33a0xxev_spi.o(i.SPIx_CR2_SPIEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[be]"></a>SPIx_CR2_SSNM_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33a0xxev_spi.o(i.SPIx_CR2_SSNM_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIx_CR2_SSNM_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[ba]"></a>SPIx_CR2_SSNSEN_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33a0xxev_spi.o(i.SPIx_CR2_SSNSEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[c1]"></a>SPIx_CR2_SSN_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33a0xxev_spi.o(i.SPIx_CR2_SSN_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIx_CR2_SSN_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[bf]"></a>SPIx_CR2_TXO_AC_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33a0xxev_spi.o(i.SPIx_CR2_TXO_AC_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[c0]"></a>SPIx_CR2_TXO_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33a0xxev_spi.o(i.SPIx_CR2_TXO_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[c3]"></a>SPIx_CR3_MERRC_Clr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33a0xxev_spi.o(i.SPIx_CR3_MERRC_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[c4]"></a>SPIx_CR3_RXBFC_Clr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33a0xxev_spi.o(i.SPIx_CR3_RXBFC_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[c2]"></a>SPIx_CR3_SERRC_Clr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33a0xxev_spi.o(i.SPIx_CR3_SERRC_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[c5]"></a>SPIx_CR3_TXBFC_Clr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33a0xxev_spi.o(i.SPIx_CR3_TXBFC_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Spi1_Init
</UL>

<P><STRONG><a name="[97]"></a>Send_AT_Command</STRONG> (Thumb, 472 bytes, Stack size 216 bytes, ec800.o(i.Send_AT_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Send_AT_Command &rArr; UART4_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Send
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CmdProcessing_thread_entry
</UL>

<P><STRONG><a name="[a8]"></a>Set_Latest_Alarm</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, main.o(i.Set_Latest_Alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Set_Latest_Alarm &rArr; RTC_GetRTC &rArr; RTC_TimeDate_GetEx
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRTC
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_Read_UserDate2
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[159]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_fm33a0xxev.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[26]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_fm33a0xxev.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(.text)
</UL>
<P><STRONG><a name="[10f]"></a>Test_ADC_ExVolt</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, adc.o(i.Test_ADC_ExVolt))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Test_ADC_ExVolt &rArr; ADC_IO_Init &rArr; AnalogIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ISR_ADC_IF_Clr
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DR_Read
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CR_EN_Setable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CFGR_BUFSEL_Set
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_VoltageCalc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Wait_Finish
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init_ExVolt
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Read
</UL>

<P><STRONG><a name="[113]"></a>TicksDelay</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, user_init.o(i.TicksDelay))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayUs
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayMs
</UL>

<P><STRONG><a name="[dd]"></a>TicksDelayMs</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, user_init.o(i.TicksDelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TicksDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[ca]"></a>TicksDelayUs</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, user_init.o(i.TicksDelayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_Init
</UL>

<P><STRONG><a name="[13]"></a>UART4_IRQHandler</STRONG> (Thumb, 476 bytes, Stack size 8 bytes, uart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART4_IRQHandler &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXBUF_Read
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_ISR_RXBF_Chk
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXBUF_Write
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_ISR_TXSE_Clr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_ISR_TXSE_Chk
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_IER_TXSE_IE_Setable
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_IER_TXSE_IE_Getable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_IER_RXBF_IE_Getable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>UART4_Send</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uart.o(i.UART4_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART4_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXBUF_Write
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_ISR_TXSE_Clr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_ISR_RXBF_Clr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_IER_TXSE_IE_Setable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_IER_RXBF_IE_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CmdProcessing_thread_entry
</UL>

<P><STRONG><a name="[14]"></a>UART5_IRQHandler</STRONG> (Thumb, 350 bytes, Stack size 8 bytes, uart.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART5_IRQHandler &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXBUF_Read
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_ISR_RXBF_Chk
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXBUF_Write
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_ISR_TXSE_Clr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_ISR_TXSE_Chk
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_IER_TXSE_IE_Setable
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_IER_TXSE_IE_Getable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_IER_RXBF_IE_Setable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_IER_RXBF_IE_Getable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33a0xxev.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>UART5_Send</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uart.o(i.UART5_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART5_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXBUF_Write
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_ISR_TXSE_Clr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_ISR_RXBF_Clr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_IER_TXSE_IE_Setable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_IER_RXBF_IE_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_TimeCalibration
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_SetInterval
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_Read_UserDate2
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_Read_RealTimeDate
</UL>

<P><STRONG><a name="[11c]"></a>UART_BaudREGCalc</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, fm33a0xxev_uart.o(i.UART_BaudREGCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UART_BaudREGCalc &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SInit
</UL>

<P><STRONG><a name="[11f]"></a>UART_Init</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, fm33a0xxev_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_Init &rArr; UARTx_CSR_STOPCFG_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_IER_TXSE_IE_Setable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_IER_RXBF_IE_Setable
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_CSR_TXEN_Setable
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_CSR_RXEN_Setable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_IER_TXBE_IE_Setable
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_IER_RXTO_IE_Setable
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_IER_RXERR_IE_Setable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_CSR_TXPOL_Setable
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_CSR_TXIREN_Setable
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_CSR_STOPCFG_Set
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_CSR_RXPOL_Setable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_CSR_PDSEL_Set
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_CSR_PARITY_Set
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_BGR_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SInit
</UL>

<P><STRONG><a name="[12c]"></a>UART_SInit</STRONG> (Thumb, 500 bytes, Stack size 48 bytes, fm33a0xxev_uart.o(i.UART_SInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = UART_SInit &rArr; UART_BaudREGCalc &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_PERCLK_SetableEx
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_RCHFCR_RCHFEN_Setable
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OPCCR1_UART1CKS_Set
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OPCCR1_UART1CKE_Setable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OPCCR1_UART0CKS_Set
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OPCCR1_UART0CKE_Setable
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uartx_Init
</UL>

<P><STRONG><a name="[120]"></a>UARTx_BGR_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33a0xxev_uart.o(i.UARTx_BGR_Write))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[122]"></a>UARTx_CSR_PARITY_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33a0xxev_uart.o(i.UARTx_CSR_PARITY_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTx_CSR_PARITY_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[121]"></a>UARTx_CSR_PDSEL_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33a0xxev_uart.o(i.UARTx_CSR_PDSEL_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTx_CSR_PDSEL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[129]"></a>UARTx_CSR_RXEN_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33a0xxev_uart.o(i.UARTx_CSR_RXEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uartx_Enable
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[127]"></a>UARTx_CSR_RXPOL_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33a0xxev_uart.o(i.UARTx_CSR_RXPOL_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[123]"></a>UARTx_CSR_STOPCFG_Set</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33a0xxev_uart.o(i.UARTx_CSR_STOPCFG_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTx_CSR_STOPCFG_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[12a]"></a>UARTx_CSR_TXEN_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33a0xxev_uart.o(i.UARTx_CSR_TXEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uartx_Enable
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[12b]"></a>UARTx_CSR_TXIREN_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xxev_uart.o(i.UARTx_CSR_TXIREN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[128]"></a>UARTx_CSR_TXPOL_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33a0xxev_uart.o(i.UARTx_CSR_TXPOL_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[114]"></a>UARTx_IER_RXBF_IE_Getable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33a0xxev_uart.o(i.UARTx_IER_RXBF_IE_Getable))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>UARTx_IER_RXBF_IE_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xxev_uart.o(i.UARTx_IER_RXBF_IE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Send
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Send
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[124]"></a>UARTx_IER_RXERR_IE_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xxev_uart.o(i.UARTx_IER_RXERR_IE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[125]"></a>UARTx_IER_RXTO_IE_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xxev_uart.o(i.UARTx_IER_RXTO_IE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[126]"></a>UARTx_IER_TXBE_IE_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33a0xxev_uart.o(i.UARTx_IER_TXBE_IE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[117]"></a>UARTx_IER_TXSE_IE_Getable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33a0xxev_uart.o(i.UARTx_IER_TXSE_IE_Getable))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>UARTx_IER_TXSE_IE_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33a0xxev_uart.o(i.UARTx_IER_TXSE_IE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Send
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Send
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[115]"></a>UARTx_ISR_RXBF_Chk</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33a0xxev_uart.o(i.UARTx_ISR_RXBF_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>UARTx_ISR_RXBF_Clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33a0xxev_uart.o(i.UARTx_ISR_RXBF_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Send
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Send
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect
</UL>

<P><STRONG><a name="[118]"></a>UARTx_ISR_TXSE_Chk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33a0xxev_uart.o(i.UARTx_ISR_TXSE_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>UARTx_ISR_TXSE_Clr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33a0xxev_uart.o(i.UARTx_ISR_TXSE_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Send
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Send
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>UARTx_RXBUF_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33a0xxev_uart.o(i.UARTx_RXBUF_Read))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>UARTx_TXBUF_Write</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33a0xxev_uart.o(i.UARTx_TXBUF_Write))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Send
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Send
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>Uartx_Enable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(i.Uartx_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uartx_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_CSR_TXEN_Setable
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_CSR_RXEN_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[e2]"></a>Uartx_Init</STRONG> (Thumb, 394 bytes, Stack size 64 bytes, uart.o(i.Uartx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Uartx_Init &rArr; UART_SInit &rArr; UART_BaudREGCalc &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_DFS_Setable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_GetClocksFreq
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[5d]"></a>VRTC_ADCCR_CKE_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33a0xxev_vrtc.o(i.VRTC_ADCCR_CKE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init_ExVolt
</UL>

<P><STRONG><a name="[5c]"></a>VRTC_ADCCR_CKS_Set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33a0xxev_vrtc.o(i.VRTC_ADCCR_CKS_Set))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init_ExVolt
</UL>

<P><STRONG><a name="[5a]"></a>VRTC_Init_RCMF_Trim</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, fm33a0xxev_vrtc.o(i.VRTC_Init_RCMF_Trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = VRTC_Init_RCMF_Trim
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VRTC_RCMFCR_TRIM_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init_ExVolt
</UL>

<P><STRONG><a name="[5b]"></a>VRTC_RCMFCR_EN_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33a0xxev_vrtc.o(i.VRTC_RCMFCR_EN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeepSleep
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init_ExVolt
</UL>

<P><STRONG><a name="[135]"></a>VRTC_RCMFCR_TRIM_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33a0xxev_vrtc.o(i.VRTC_RCMFCR_TRIM_Set))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VRTC_Init_RCMF_Trim
</UL>

<P><STRONG><a name="[e6]"></a>Voltage_Read</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.Voltage_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Voltage_Read &rArr; Test_ADC_ExVolt &rArr; ADC_IO_Init &rArr; AnalogIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ADC_ExVolt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[51]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[10b]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uartx_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>__rt_ffs</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, kservice.o(i.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[1a5]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1a6]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1a7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[13c]"></a>fm33xx_hw_lptimer_init</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, lptimer32.o(i.fm33xx_hw_lptimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fm33xx_hw_lptimer_init &rArr; CMU_PERCLK_SetableEx
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_PERCLK_SetableEx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_ISR_OVIF_Clr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IER_OVIE_Setable
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_CR_EN_Setable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_CFGR_TMODE_Set
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_CFGR_PSCSEL_Set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_CFGR_ONST_Set
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_CFGR_ETR_AFEN_Setable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_CFGR_DIVSEL_Set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_ARR_Write
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OPCCR2_LPTCKS_Set
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OPCCR2_LPTCKE_Setable
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[148]"></a>$Super$$main</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = $Super$$main &rArr; Connect &rArr; Send_AT_Command &rArr; UART4_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_EXTIISR_ClrEx
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[31]"></a>main_thread_entry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, components.o(i.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; Connect &rArr; Send_AT_Command &rArr; UART4_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[a6]"></a>modbus_crc16</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, main.o(i.modbus_crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = modbus_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CRC
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_TimeCalibration
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_SetInterval
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_Read_UserDate2
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_Read_RealTimeDate
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CmdProcessing_thread_entry
</UL>

<P><STRONG><a name="[14e]"></a>rt_application_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, components.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[14f]"></a>rt_components_board_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, components.o(i.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[14d]"></a>rt_components_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, components.o(i.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[151]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[154]"></a>rt_exit_critical</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[156]"></a>rt_free</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, mem.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[15d]"></a>rt_heap_begin_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.rt_heap_begin_get))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[15c]"></a>rt_heap_end_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.rt_heap_end_get))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[158]"></a>rt_hw_board_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, board.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_hw_board_init &rArr; Init_System &rArr; Uartx_Init &rArr; UART_SInit &rArr; UART_BaudREGCalc &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_end_get
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_begin_get
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_sethook
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm33xx_hw_lptimer_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[3e]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[138]"></a>rt_hw_stack_init</STRONG> (Thumb, 58 bytes, Stack size 36 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[10c]"></a>rt_interrupt_enter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[10e]"></a>rt_interrupt_leave</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[150]"></a>rt_kprintf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>

<P><STRONG><a name="[166]"></a>rt_malloc</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, mem.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[137]"></a>rt_memset</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[167]"></a>rt_object_allocate</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>

<P><STRONG><a name="[16b]"></a>rt_object_delete</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[16d]"></a>rt_object_detach</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[168]"></a>rt_object_get_information</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, object.o(i.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[16e]"></a>rt_object_init</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[186]"></a>rt_object_is_systemobject</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[155]"></a>rt_schedule</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[172]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_insert_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[173]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_schedule_remove_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
</UL>

<P><STRONG><a name="[14a]"></a>rt_sem_create</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[174]"></a>rt_sem_init</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[d1]"></a>rt_sem_release</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_1s
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_10ms
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_thread_entry
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CmdProcessing_thread_entry
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[a2]"></a>rt_sem_take</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_sem_take &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_Read_UserDate2
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_Read_RealTimeDate
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_thread_entry
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeOut_thread_entry
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CmdProcessing_thread_entry
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_HandShakeProcessing_thread_entry
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[178]"></a>rt_show_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_show_version
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[179]"></a>rt_soft_timer_check</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, timer.o(i.rt_soft_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_soft_timer_check &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[169]"></a>rt_strncpy</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, kservice.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[15e]"></a>rt_system_heap_init</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, mem.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_system_heap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[17c]"></a>rt_system_scheduler_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[17e]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[180]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[181]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_system_timer_thread_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[14b]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[183]"></a>rt_thread_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(i.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[28]"></a>rt_thread_exit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, thread.o(i.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_exit &rArr; rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[188]"></a>rt_thread_idle_excute</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, idle.o(i.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_thread
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[18a]"></a>rt_thread_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[15b]"></a>rt_thread_idle_sethook</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, idle.o(i.rt_thread_idle_sethook))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_thread_idle_sethook
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[182]"></a>rt_thread_init</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
</UL>

<P><STRONG><a name="[95]"></a>rt_thread_mdelay</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thread.o(i.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CmdProcessing_thread_entry
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart
</UL>

<P><STRONG><a name="[160]"></a>rt_thread_resume</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>

<P><STRONG><a name="[176]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[184]"></a>rt_thread_sleep</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, thread.o(i.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_thread_sleep &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[14c]"></a>rt_thread_startup</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[162]"></a>rt_thread_suspend</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[29]"></a>rt_thread_timeout</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, thread.o(i.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[18f]"></a>rt_thread_yield</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, thread.o(i.rt_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_thread_yield &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[18b]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, clock.o(i.rt_tick_from_millisecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tick_from_millisecond &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[17a]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[10d]"></a>rt_tick_increase</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[190]"></a>rt_timer_check</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[177]"></a>rt_timer_control</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_timer_control
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[149]"></a>rt_timer_create</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, timer.o(i.rt_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[185]"></a>rt_timer_detach</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[139]"></a>rt_timer_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[ce]"></a>rt_timer_start</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[18d]"></a>rt_timer_stop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[53]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rtthread_startup &rArr; rt_hw_board_init &rArr; Init_System &rArr; Uartx_Init &rArr; UART_SInit &rArr; UART_BaudREGCalc &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2f]"></a>EVC_HandShakeProcessing_thread_entry</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, main.o(i.EVC_HandShakeProcessing_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = EVC_HandShakeProcessing_thread_entry &rArr; Connect &rArr; Send_AT_Command &rArr; UART4_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_Read_UserDate2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2e]"></a>GPRS_CmdProcessing_thread_entry</STRONG> (Thumb, 808 bytes, Stack size 272 bytes, main.o(i.GPRS_CmdProcessing_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = GPRS_CmdProcessing_thread_entry &rArr; Disconnect &rArr; Send_AT_Command &rArr; UART4_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Send
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRTC
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnect
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerStop
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerStart
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_crc16
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRS_CRC
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_TimeCalibration
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_SetInterval
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_Read_RealTimeDate
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[30]"></a>RTC_TimeOut_thread_entry</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, main.o(i.RTC_TimeOut_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = RTC_TimeOut_thread_entry &rArr; Connect &rArr; Send_AT_Command &rArr; UART4_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVC_Read_UserDate2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2d]"></a>TM_thread_entry</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, main.o(i.TM_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TM_thread_entry &rArr; Connect &rArr; Send_AT_Command &rArr; UART4_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2a]"></a>timeout_10ms</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.timeout_10ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = timeout_10ms &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2b]"></a>timeout_1s</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.timeout_1s))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = timeout_1s &rArr; rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2c]"></a>timeout_2s</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.timeout_2s))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[b1]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, user_init.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysTick
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>

<P><STRONG><a name="[15a]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, board.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[32]"></a>nothing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(i.nothing))
<BR>[Address Reference Count : 1]<UL><LI> board.o(i.rt_hw_board_init)
</UL>
<P><STRONG><a name="[132]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uartx_Init
</UL>

<P><STRONG><a name="[134]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uartx_Init
</UL>

<P><STRONG><a name="[133]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, uart.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uartx_Init
</UL>

<P><STRONG><a name="[146]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lptimer32.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm33xx_hw_lptimer_init
</UL>

<P><STRONG><a name="[f9]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rtc.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[79]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bt16.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtimerInit
</UL>

<P><STRONG><a name="[37]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[36]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[38]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[35]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[189]"></a>_has_defunct_thread</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(i._has_defunct_thread))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[34]"></a>rt_thread_idle_entry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[15f]"></a>rt_ipc_list_resume</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[161]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ipc.o(i.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[164]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(i.rt_ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>

<P><STRONG><a name="[165]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[163]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[175]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[157]"></a>plug_holes</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[16a]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[16c]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[17d]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[136]"></a>_rt_thread_init</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, thread.o(i._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[187]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[18c]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[13a]"></a>_rt_timer_init</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, timer.o(i._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[17b]"></a>_rt_timer_remove</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer.o(i._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[13b]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
</UL>

<P><STRONG><a name="[192]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[191]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
</UL>

<P><STRONG><a name="[33]"></a>rt_thread_timer_entry</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, timer.o(i.rt_thread_timer_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rt_thread_timer_entry &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.rt_system_timer_thread_init)
</UL>
<P><STRONG><a name="[18e]"></a>rt_timer_list_next_timeout</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, timer.o(i.rt_timer_list_next_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_timer_list_next_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[3d]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
